-- Events table to store event information



CREATE TABLE events (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    location VARCHAR(255) NOT NULL,
    image_path VARCHAR(255),
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

ALTER TABLE events 
ADD COLUMN is_active BOOLEAN DEFAULT TRUE,
ADD COLUMN is_deleted BOOLEAN DEFAULT FALSE;

-- Event participants table to track who joined which event
CREATE TABLE event_participants (
    id INT PRIMARY KEY AUTO_INCREMENT,
    event_id INT NOT NULL,
    user_id INT NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY unique_participant (event_id, user_id)
);

CREATE TABLE announcements (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

ALTER TABLE announcements ADD COLUMN status ENUM('active', 'deleted') DEFAULT 'active';

CREATE TABLE announcement_reactions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    announcement_id INT NOT NULL,
    user_id INT NOT NULL,
    reaction_type ENUM('like', 'dislike') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (announcement_id) REFERENCES announcements(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    UNIQUE KEY unique_reaction (announcement_id, user_id)
);

CREATE TABLE forums (
  id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  created_by INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (created_by) REFERENCES users(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE
);

CREATE TABLE forum_comments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  forum_id INT NOT NULL,
  user_id INT NOT NULL,
  comment TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  reported BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (forum_id) REFERENCES forums(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE
);

CREATE TABLE forum_reports (
  id INT AUTO_INCREMENT PRIMARY KEY,
  forum_comment_id INT NOT NULL,
  reported_by INT NOT NULL,
  reason TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (forum_comment_id) REFERENCES forum_comments(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE,
  FOREIGN KEY (reported_by) REFERENCES users(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE
);


CREATE TABLE posts (
  id int(11) NOT NULL AUTO_INCEMENT PRIMARY KEY,
  description text NOT NULL,
  date date NOT NULL,
  time time NOT NULL,
  image_data longblob DEFAULT NULL,
  image_type varchar(50) DEFAULT NULL,
  created_by int(11) NOT NULL,
  created_at timestamp NOT NULL DEFAULT current_timestamp(),
 updated_at timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE post_reactions (
  id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_id int(11) NOT NULL,
  user_id int(11) NOT NULL,
  reaction_type enum('like','dislike') NOT NULL,
  created_at timestamp NOT NULL DEFAULT current_timestamp(),
  FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  UNIQUE KEY unique_reaction (post_id, user_id)
);

-- First fix the post_comments table
CREATE TABLE post_comments (
  id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_id int(11) NOT NULL,
  user_id int(11) NOT NULL,
  comment text NOT NULL,
  created_at timestamp NOT NULL DEFAULT current_timestamp(),
  updated_at timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  reported tinyint(1) DEFAULT 0,
  FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE post_reports (
  id INT AUTO_INCREMENT PRIMARY KEY,
  post_comment_id INT NOT NULL,
  reported_by INT NOT NULL,
  reason TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (post_comment_id) REFERENCES post_comments(id) ON DELETE CASCADE,
  FOREIGN KEY (reported_by) REFERENCES users(id) ON DELETE CASCADE
);
INSERT INTO Users (name, age)VALUES('murshid', 21);
INSERT INTO Users (name, age)VALUES('amjad', 19);
INSERT INTO Users (name, age)VALUES('polly', 3);



-- Table for polls
CREATE TABLE polls (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_by INT NOT NULL,
    end_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

-- Table for poll choices/options
CREATE TABLE poll_choices (
    id INT AUTO_INCREMENT PRIMARY KEY,
    poll_id INT NOT NULL,
    choice_text VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (poll_id) REFERENCES polls(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Table for poll votes
CREATE TABLE poll_votes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    poll_id INT NOT NULL,
    choice_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (poll_id) REFERENCES polls(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (choice_id) REFERENCES poll_choices(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    UNIQUE KEY unique_vote (poll_id, user_id) -- Ensures one vote per user per poll
);


-- Complaints table to store all complaints
CREATE TABLE complaints (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    status ENUM('pending', 'in_progress', 'resolved') DEFAULT 'pending',
    priority ENUM('low', 'medium', 'high') DEFAULT 'medium',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP NULL,
    resolved_by INT NULL,
    category VARCHAR(100) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (resolved_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Complaint responses table to store replies/updates
CREATE TABLE complaint_responses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    complaint_id INT NOT NULL,
    user_id INT NOT NULL,
    response TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (complaint_id) REFERENCES complaints(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE chats (
     id INT AUTO_INCREMENT PRIMARY KEY,
     user1_id INT NOT NULL,
     user2_id INT NOT NULL,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE,
     FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE
 );

 CREATE TABLE messages (
     id INT AUTO_INCREMENT PRIMARY KEY,
     chat_id INT NOT NULL,
     sender_id INT NOT NULL,
     message TEXT NOT NULL,
     is_read BOOLEAN DEFAULT FALSE,
     sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE,
     FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE
 );

 ALTER TABLE messages ADD is_edited TINYINT(1) DEFAULT 0;
 
 CREATE TABLE chat_requests (
     id INT AUTO_INCREMENT PRIMARY KEY,
     sender_id INT NOT NULL,
     recipient_id INT NOT NULL,
     status ENUM('pending', 'accepted', 'declined') DEFAULT 'pending',
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE,
     FOREIGN KEY (recipient_id) REFERENCES users(id) ON DELETE CASCADE
 );

 CREATE TABLE facilities (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL COMMENT 'Facility name',
    description TEXT COMMENT 'Facility description',
    capacity INT COMMENT 'Capacity of the facility',
   image_path VARCHAR(255),
    status ENUM('available', 'unavailable') DEFAULT 'available' COMMENT 'Facility status',
    created_by INT NOT NULL COMMENT 'Admin ID who created this facility',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of creation',
    FOREIGN KEY (created_by) REFERENCES admins(id) ON DELETE CASCADE
);

CREATE TABLE bookings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    facility_id INT,
    facility_name VARCHAR(255),
    booking_date DATE,
    booking_time TIME,
    duration INT,
    booked_by VARCHAR(255),
    user_id INT,
    FOREIGN KEY (facility_id) REFERENCES facilities(id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE groups (
    group_id INT AUTO_INCREMENT PRIMARY KEY,
    group_name VARCHAR(255) NOT NULL,
    group_category VARCHAR(100) NOT NULL,
    group_members_count INT DEFAULT 0,
    created_date DATE NOT NULL DEFAULT CURRENT_DATE,
    group_description TEXT,
    created_by INT NOT NULL,
    image_data LONGBLOB, 
    image_type VARCHAR(50), 
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE group_members (
    id INT PRIMARY KEY AUTO_INCREMENT,
    group_id INT,
    user_id INT,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

ALTER TABLE group_members 
ADD UNIQUE KEY unique_member (group_id, user_id);


CREATE TABLE groups_report (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT NOT NULL,
    reported_by INT NOT NULL,
    reason TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (reported_by) REFERENCES users(id)
);

CREATE TABLE `listings` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `type` enum('service','sale','exchange','lost') NOT NULL,
  `description` text NOT NULL,
  `posted_by` int(11) NOT NULL,
  `date_posted` timestamp NOT NULL DEFAULT current_timestamp(),
  `image_data` longblob DEFAULT NULL,
  `image_type` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


ALTER TABLE `listings`
  ADD PRIMARY KEY (`id`),
  ADD KEY `posted_by` (`posted_by`),
  ADD KEY `date_posted` (`date_posted`);

ALTER TABLE `listings`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

ALTER TABLE `listings`
  ADD CONSTRAINT `listings_ibfk_1` FOREIGN KEY (`posted_by`) REFERENCES `users` (`id`);

ALTER TABLE listings ADD COLUMN is_deleted BOOLEAN DEFAULT FALSE;

CREATE TABLE group_chats (
    id INT AUTO_INCREMENT PRIMARY KEY, -- Unique identifier for each message
    group_id INT NOT NULL,             -- Links the message to a specific group
    user_id INT NOT NULL,              -- Links the message to the sender's user ID
    message TEXT NOT NULL,             -- The actual message content
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp of when the message was sent
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE reported_group_message (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT NOT NULL,
    message_id INT NOT NULL,
    reported_by INT NOT NULL,
    reason TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (message_id) REFERENCES group_chats(id),
    FOREIGN KEY (reported_by) REFERENCES users(id)
);

ALTER TABLE facilities 
ADD COLUMN image_data LONGBLOB COMMENT 'Facility image data' AFTER status,
ADD COLUMN image_type VARCHAR(50) COMMENT 'Facility image MIME type' AFTER image_data;

CREATE TABLE password_resets (
    id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT(11) NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at DATETIME NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    KEY user_id (user_id),
    KEY token (token),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

//**********************************************Security Part*******************************************


//emergency Contacts

CREATE TABLE emergency_categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    icon VARCHAR(50) NOT NULL,
    description TEXT
);

CREATE TABLE emergency_contacts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_id INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    description TEXT,
    priority INT DEFAULT 1,
    FOREIGN KEY (category_id) REFERENCES emergency_categories(id)
);

INSERT INTO emergency_categories (name, icon, description) VALUES
('Police', 'shield-alt', 'Police emergency and support services'),
('Fire & Rescue', 'fire-extinguisher', 'Firefighting and rescue operations'),
('Ambulance', 'ambulance', 'Medical emergency transportation'),
('Electricity', 'bolt', 'Power outage and electrical emergencies'),
('Water Supply', 'tint', 'Water service issues and emergencies'),
('Gas Leak', 'burn', 'Emergency contact for gas leak or explosion risk');

-- Police
INSERT INTO emergency_contacts (category_id, name, phone, description, priority) VALUES
(1, 'Police Emergency Hotline', '119', 'General police emergency number', 1),
(1, 'Colombo Central Police', '011-2433333', 'Main police station in Colombo', 2),
(1, 'Child & Women Bureau', '011-2444444', 'Support for women and children in distress', 3),
(1, 'Tourist Police', '011-2421052', 'Assistance for foreign visitors', 4);

-- Fire & Rescue
INSERT INTO emergency_contacts (category_id, name, phone, description, priority) VALUES
(2, 'Fire Emergency Hotline', '110', 'General fire emergency contact', 1),
(2, 'Colombo Fire Brigade', '011-2422222', 'Fire station serving Colombo area', 2),
(2, 'Kandy Fire Station', '081-2224444', 'Fire services in Kandy region', 3),
(2, 'Dehiwala Fire Station', '011-2735533', 'Fire services in Dehiwala area', 4);

-- Ambulance
INSERT INTO emergency_contacts (category_id, name, phone, description, priority) VALUES
(3, 'Suwaseriya Ambulance', '1990', 'Free ambulance service nationwide', 1),
(3, 'Colombo General Hospital Ambulance', '011-2691111', 'Government hospital ambulance', 2),
(3, 'Asiri Medical Ambulance', '011-4524400', 'Private hospital emergency service', 3),
(3, 'Nawaloka Hospital Ambulance', '011-5577111', 'Private hospital ambulance support', 4);

-- Electricity
INSERT INTO emergency_contacts (category_id, name, phone, description, priority) VALUES
(4, 'CEB Hotline', '1987', 'Report power outages or faults', 1),
(4, 'Colombo Electricity Office', '011-2333333', 'Main city electricity issues', 2),
(4, 'Kelaniya CEB Branch', '011-2911222', 'Regional power issues', 3),
(4, 'Power Failure Emergency', '011-2302302', '24/7 emergency power support', 4);

-- Water Supply
INSERT INTO emergency_contacts (category_id, name, phone, description, priority) VALUES
(5, 'Water Board Hotline', '1939', 'Report leaks or water issues', 1),
(5, 'Colombo Water Board', '011-2689490', 'Urban water supply issues', 2),
(5, 'Emergency Water Tankers', '011-5432100', 'Request water delivery in crisis', 3),
(5, 'Water Quality Support', '011-2432432', 'Drinking water safety and complaints', 4);

-- Gas Leak
INSERT INTO emergency_contacts (category_id, name, phone, description, priority) VALUES
(6, 'Litro Gas Emergency', '1311', 'Emergency gas leak reporting', 1),
(6, 'Laugfs Gas Hotline', '011-5555055', 'Emergency support for Laugfs users', 2),
(6, 'Fire Department - Gas Team', '011-2435555', 'Special unit for flammable gas risks', 3),
(6, 'Emergency Gas Response', '077-6543210', 'Mobile gas leak inspection team', 4);


//visitor passes

CREATE TABLE Visitor_Passes (
    pass_id INT AUTO_INCREMENT PRIMARY KEY,
    visitor_name VARCHAR(100) NOT NULL,
    visitor_count INT NOT NULL CHECK (visitor_count > 0),
    resident_name VARCHAR(100) NOT NULL,
    visit_date DATE NOT NULL,
    visit_time TIME NOT NULL,
    duration INT NOT NULL CHECK (duration BETWEEN 1 AND 24),
    purpose TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

//incident reports

CREATE TABLE incident_reports (
    report_id INT PRIMARY KEY AUTO_INCREMENT,
    type VARCHAR(50) NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    status VARCHAR(30) NOT NULL CHECK (status IN ('Open', 'In Progress', 'Closed', 'Resolved', 'Pending')),
    location VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

// manage security shedule and admin parts

-- Duty shifts table
CREATE TABLE duty_shifts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    description VARCHAR(255)
);

-- Insert default shifts
INSERT INTO duty_shifts (name, start_time, end_time, description) VALUES
('Morning', '08:00:00', '16:00:00', 'Morning shift (8 AM - 4 PM)'),
('Afternoon', '16:00:00', '00:00:00', 'Afternoon shift (4 PM - 12 AM)'),
('Night', '00:00:00', '08:00:00', 'Night shift (12 AM - 8 AM)');

-- Duty schedule table
CREATE TABLE duty_schedule (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    shift_id INT NOT NULL,
    duty_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (shift_id) REFERENCES duty_shifts(id),
    CONSTRAINT unique_officer_date UNIQUE (user_id, duty_date)
);

-- Trigger to enforce maximum 3 officers per shift
DELIMITER //
CREATE TRIGGER check_max_officers_per_shift
BEFORE INSERT ON duty_schedule
FOR EACH ROW
BEGIN
    DECLARE officer_count INT;
    
    SELECT COUNT(*) INTO officer_count 
    FROM duty_schedule 
    WHERE duty_date = NEW.duty_date 
    AND shift_id = NEW.shift_id;
    
    IF officer_count >= 3 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Maximum of 3 officers per shift reached';
    END IF;
END//
DELIMITER ;

-- Trigger to ensure only security officers can be assigned
DELIMITER //
CREATE TRIGGER check_security_officer_insert
BEFORE INSERT ON duty_schedule
FOR EACH ROW
BEGIN
    DECLARE is_security_officer INT;
    
    SELECT COUNT(*) INTO is_security_officer 
    FROM users 
    WHERE users.id = NEW.user_id AND users.role_id = 5;
    
    IF is_security_officer = 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Only security officers (role_id=5) can be assigned to duty shifts';
    END IF;
END//
DELIMITER ;

-- Trigger for updates
DELIMITER //
CREATE TRIGGER check_security_officer_update
BEFORE UPDATE ON duty_schedule
FOR EACH ROW
BEGIN
    DECLARE is_security_officer INT;
    
    SELECT COUNT(*) INTO is_security_officer 
    FROM users 
    WHERE users.id = NEW.user_id AND users.role_id = 5;
    
    IF is_security_officer = 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Only security officers (role_id=5) can be assigned to duty shifts';
    END IF;
END//
DELIMITER ;

-- Trigger for updates to enforce maximum officers per shift
DELIMITER //
CREATE TRIGGER check_max_officers_per_shift_update
BEFORE UPDATE ON duty_schedule
FOR EACH ROW
BEGIN
    DECLARE officer_count INT;
    
    -- Only check if the shift or date is being changed
    IF NEW.shift_id != OLD.shift_id OR NEW.duty_date != OLD.duty_date THEN
        SELECT COUNT(*) INTO officer_count 
        FROM duty_schedule 
        WHERE duty_date = NEW.duty_date 
        AND shift_id = NEW.shift_id
        AND id != NEW.id; -- Exclude the current record being updated
        
        IF officer_count >= 3 THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Maximum of 3 officers per shift reached';
        END IF;
    END IF;
END//
DELIMITER ;


//*************************maintenance requests***************************

// Maintenance member

CREATE TABLE maintenance_members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    experience INT NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    profile_image VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


//******************************residents requests************************************


CREATE TABLE maintenance_types (
    type_id INT AUTO_INCREMENT PRIMARY KEY,
    type_name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE maintenance_status (
    status_id INT AUTO_INCREMENT PRIMARY KEY,
    status_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE requests (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    resident_id INT NOT NULL,
    type_id INT NOT NULL,
    description TEXT NOT NULL,
    urgency_level ENUM('low', 'medium', 'high') NOT NULL,
    status_id INT DEFAULT 1,
    assigned_maintainer_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (resident_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (type_id) REFERENCES maintenance_types(type_id),
    FOREIGN KEY (status_id) REFERENCES maintenance_status(status_id),
    FOREIGN KEY (assigned_maintainer_id) REFERENCES maintenance_members(id) ON DELETE SET NULL
);


INSERT INTO requests (resident_id, type_id, description, urgency_level, status_id, assigned_maintainer_id)
VALUES
(1, 1, 'Fix broken kitchen light', 'medium', 1, 1),
(3, 2, 'Clogged bathroom sink', 'high', 2, 2),
(13, 3, 'Air conditioner not cooling', 'high', 1, 3),
(17, 1, 'Power outlet sparking', 'high', 1, 1);



INSERT INTO maintenance_status (status_name) VALUES 
('Pending'), 
('In Progress'), 
('Completed'), 
('Cancelled');

INSERT INTO maintenance_types (type_name) VALUES 
('Plumbing'), 
('Electrical'), 
('HVAC'), 
('Structural'), 
('Appliance'), 
('General Maintenance');

-- Insert sample maintenance requests
INSERT INTO maintenance_requests (resident_id, type_id, title, description, urgency_level) VALUES
(1, 1, 'Leaky faucet', 'Kitchen faucet is leaking continuously', 'medium'),
(2, 3, 'Clogged drain', 'Bathroom sink drain is completely clogged', 'high'),
(3, 4, 'Broken light switch', 'Living room light switch not working', 'low');

-- Insert sample assignments
INSERT INTO request_assignments (request_id, staff_id, due_date) VALUES
(1, 2, '2024-09-18'),
(2, 1, '2024-09-20');


CREATE TABLE `listings` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `type` enum('service','sale','exchange','lost') NOT NULL,
  `description` text NOT NULL,
  `posted_by` int(11) NOT NULL,
  `date_posted` timestamp NOT NULL DEFAULT current_timestamp(),
  `image_data` longblob DEFAULT NULL,
  `image_type` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


ALTER TABLE `listings`
  ADD PRIMARY KEY (`id`),
  ADD KEY `posted_by` (`posted_by`),
  ADD KEY `date_posted` (`date_posted`);

ALTER TABLE `listings`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

ALTER TABLE `listings`
  ADD CONSTRAINT `listings_ibfk_1` FOREIGN KEY (`posted_by`) REFERENCES `users` (`id`);



INSERT INTO maintenance_types (type_name) VALUES 
('Plumbing'), 
('Electrical'), 
('HVAC'), 
('Structural'), 
('Appliance'), 
('General Maintenance');

ALTER TABLE users ADD COLUMN is_deleted TINYINT(1) DEFAULT 0 NOT NULL AFTER is_active;
