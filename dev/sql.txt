-- Events table to store event information
CREATE TABLE events (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    location VARCHAR(255) NOT NULL,
    image_path VARCHAR(255),
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Event participants table to track who joined which event
CREATE TABLE event_participants (
    id INT PRIMARY KEY AUTO_INCREMENT,
    event_id INT NOT NULL,
    user_id INT NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY unique_participant (event_id, user_id)
);

CREATE TABLE announcements (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

CREATE TABLE announcement_reactions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    announcement_id INT NOT NULL,
    user_id INT NOT NULL,
    reaction_type ENUM('like', 'dislike') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (announcement_id) REFERENCES announcements(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    UNIQUE KEY unique_reaction (announcement_id, user_id)
);

CREATE TABLE forums (
  id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  created_by INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (created_by) REFERENCES users(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE
);

CREATE TABLE forum_comments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  forum_id INT NOT NULL,
  user_id INT NOT NULL,
  comment TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  reported BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (forum_id) REFERENCES forums(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE
);

CREATE TABLE forum_reports (
  id INT AUTO_INCREMENT PRIMARY KEY,
  forum_comment_id INT NOT NULL,
  reported_by INT NOT NULL,
  reason TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (forum_comment_id) REFERENCES forum_comments(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE,
  FOREIGN KEY (reported_by) REFERENCES users(id) 
      ON DELETE CASCADE 
      ON UPDATE CASCADE
);


CREATE TABLE posts (
  id int(11) NOT NULL AUTO_INCEMENT PRIMARY KEY,
  description text NOT NULL,
  date date NOT NULL,
  time time NOT NULL,
  image_data longblob DEFAULT NULL,
  image_type varchar(50) DEFAULT NULL,
  created_by int(11) NOT NULL,
  created_at timestamp NOT NULL DEFAULT current_timestamp(),
 updated_at timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE post_reactions (
  id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_id int(11) NOT NULL,
  user_id int(11) NOT NULL,
  reaction_type enum('like','dislike') NOT NULL,
  created_at timestamp NOT NULL DEFAULT current_timestamp(),
  FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  UNIQUE KEY unique_reaction (post_id, user_id)
);

-- First fix the post_comments table
CREATE TABLE post_comments (
  id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  post_id int(11) NOT NULL,
  user_id int(11) NOT NULL,
  comment text NOT NULL,
  created_at timestamp NOT NULL DEFAULT current_timestamp(),
  updated_at timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  reported tinyint(1) DEFAULT 0,
  FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE post_reports (
  id INT AUTO_INCREMENT PRIMARY KEY,
  post_comment_id INT NOT NULL,
  reported_by INT NOT NULL,
  reason TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (post_comment_id) REFERENCES post_comments(id) ON DELETE CASCADE,
  FOREIGN KEY (reported_by) REFERENCES users(id) ON DELETE CASCADE
);
INSERT INTO Users (name, age)VALUES('murshid', 21);
INSERT INTO Users (name, age)VALUES('amjad', 19);
INSERT INTO Users (name, age)VALUES('polly', 3);



//inventory 

-- Create the 'available_store' table
CREATE TABLE available_store (
    item_id VARCHAR(20) PRIMARY KEY, -- Primary Key
    item_name VARCHAR(100) NOT NULL,
    purchase_date DATE NOT NULL,
    available_quantity INT NOT NULL
);

-- Create the 'inventory_usage_log' table
CREATE TABLE inventory_usage_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY, -- Unique identifier for each log entry
    item_id VARCHAR(20), -- Foreign Key referencing available_store(item_id)
    item_name VARCHAR(100), -- Item name for logging purposes
    usage_date DATE NOT NULL,
    usage_time TIME NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (item_id) REFERENCES available_store(item_id) ON DELETE CASCADE ON UPDATE CASCADE
);

// Maintenance member

CREATE TABLE maintenance_members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    experience INT NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    profile_image VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


-- Table for polls
CREATE TABLE polls (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_by INT NOT NULL,
    end_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);

-- Table for poll choices/options
CREATE TABLE poll_choices (
    id INT AUTO_INCREMENT PRIMARY KEY,
    poll_id INT NOT NULL,
    choice_text VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (poll_id) REFERENCES polls(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Table for poll votes
CREATE TABLE poll_votes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    poll_id INT NOT NULL,
    choice_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (poll_id) REFERENCES polls(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (choice_id) REFERENCES poll_choices(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    UNIQUE KEY unique_vote (poll_id, user_id) -- Ensures one vote per user per poll
);


-- Complaints table to store all complaints
CREATE TABLE complaints (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    status ENUM('pending', 'in_progress', 'resolved') DEFAULT 'pending',
    priority ENUM('low', 'medium', 'high') DEFAULT 'medium',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP NULL,
    resolved_by INT NULL,
    category VARCHAR(100) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (resolved_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Complaint responses table to store replies/updates
CREATE TABLE complaint_responses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    complaint_id INT NOT NULL,
    user_id INT NOT NULL,
    response TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (complaint_id) REFERENCES complaints(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE chats (
     id INT AUTO_INCREMENT PRIMARY KEY,
     user1_id INT NOT NULL,
     user2_id INT NOT NULL,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE,
     FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE
 );
 CREATE TABLE messages (
     id INT AUTO_INCREMENT PRIMARY KEY,
     chat_id INT NOT NULL,
     sender_id INT NOT NULL,
     message TEXT NOT NULL,
     is_read BOOLEAN DEFAULT FALSE,
     sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE,
     FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE
 );
 
 CREATE TABLE chat_requests (
     id INT AUTO_INCREMENT PRIMARY KEY,
     sender_id INT NOT NULL,
     recipient_id INT NOT NULL,
     status ENUM('pending', 'accepted', 'declined') DEFAULT 'pending',
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE,
     FOREIGN KEY (recipient_id) REFERENCES users(id) ON DELETE CASCADE
 );

 CREATE TABLE facilities (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL COMMENT 'Facility name',
    description TEXT COMMENT 'Facility description',
    capacity INT COMMENT 'Capacity of the facility',
   image_path VARCHAR(255),
    status ENUM('available', 'unavailable') DEFAULT 'available' COMMENT 'Facility status',
    created_by INT NOT NULL COMMENT 'Admin ID who created this facility',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of creation',
    FOREIGN KEY (created_by) REFERENCES admins(id) ON DELETE CASCADE
);

CREATE TABLE bookings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    facility_id INT,
    facility_name VARCHAR(255),
    booking_date DATE,
    booking_time TIME,
    duration INT,
    booked_by VARCHAR(255),
    user_id INT,
    FOREIGN KEY (facility_id) REFERENCES facilities(id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE groups (
    group_id INT AUTO_INCREMENT PRIMARY KEY,
    group_name VARCHAR(255) NOT NULL,
    group_category VARCHAR(100) NOT NULL,
    group_members_count INT DEFAULT 0,
    created_date DATE NOT NULL DEFAULT CURRENT_DATE,
    group_description TEXT,
    created_by INT NOT NULL,
    image_data LONGBLOB, 
    image_type VARCHAR(50), 
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE group_members (
    id INT PRIMARY KEY AUTO_INCREMENT,
    group_id INT,
    user_id INT,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

ALTER TABLE group_members 
ADD UNIQUE KEY unique_member (group_id, user_id);


CREATE TABLE groups_report (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT NOT NULL,
    reported_by INT NOT NULL,
    reason TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (reported_by) REFERENCES users(id)
);

CREATE TABLE listings (
  id int(11) NOT NULL,
  title varchar(255) NOT NULL,
  type enum('service','sale','exchange','lost') NOT NULL,
  description text NOT NULL,
  posted_by int(11) NOT NULL,
  date_posted timestamp NOT NULL DEFAULT current_timestamp(),
  image_data longblob DEFAULT NULL,
  image_type varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


CREATE TABLE group_chats (
    id INT AUTO_INCREMENT PRIMARY KEY, -- Unique identifier for each message
    group_id INT NOT NULL,             -- Links the message to a specific group
    user_id INT NOT NULL,              -- Links the message to the sender's user ID
    message TEXT NOT NULL,             -- The actual message content
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp of when the message was sent
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE reported_group_message (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT NOT NULL,
    message_id INT NOT NULL,
    reported_by INT NOT NULL,
    reason TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (message_id) REFERENCES group_chats(id),
    FOREIGN KEY (reported_by) REFERENCES users(id)
);
ALTER TABLE facilities 
ADD COLUMN image_data LONGBLOB COMMENT 'Facility image data' AFTER status,
ADD COLUMN image_type VARCHAR(50) COMMENT 'Facility image MIME type' AFTER image_data;

CREATE TABLE password_resets (
    id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT(11) NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at DATETIME NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    KEY user_id (user_id),
    KEY token (token),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

ALTER TABLE messages ADD is_edited TINYINT(1) DEFAULT 0;

CREATE TABLE reports (
    id INT(11) PRIMARY KEY AUTO_INCREMENT,
    reporter_id INT(11) NOT NULL,
    reported_user_message VARCHAR(255) NOT NULL,
    category VARCHAR(50) NOT NULL,
    description TEXT NOT NULL,
    status ENUM('pending', 'validated', 'dismissed') DEFAULT 'pending',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (reporter_id) REFERENCES users(id) ON DELETE CASCADE
); 


